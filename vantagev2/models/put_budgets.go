// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PutBudgets Update a Budget.
//
// swagger:model putBudgets
type PutBudgets struct {

	// The CostReport token.
	CostReportToken string `json:"cost_report_token,omitempty"`

	// The name of the Budget.
	Name string `json:"name,omitempty"`

	// The periods for the Budget. The start_at and end_at must be iso8601 formatted e.g. YYYY-MM-DD.
	Periods []*PutBudgetsPeriodsItems0 `json:"periods"`
}

// Validate validates this put budgets
func (m *PutBudgets) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePeriods(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PutBudgets) validatePeriods(formats strfmt.Registry) error {
	if swag.IsZero(m.Periods) { // not required
		return nil
	}

	for i := 0; i < len(m.Periods); i++ {
		if swag.IsZero(m.Periods[i]) { // not required
			continue
		}

		if m.Periods[i] != nil {
			if err := m.Periods[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("periods" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("periods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this put budgets based on the context it is used
func (m *PutBudgets) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePeriods(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PutBudgets) contextValidatePeriods(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Periods); i++ {

		if m.Periods[i] != nil {

			if swag.IsZero(m.Periods[i]) { // not required
				return nil
			}

			if err := m.Periods[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("periods" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("periods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PutBudgets) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PutBudgets) UnmarshalBinary(b []byte) error {
	var res PutBudgets
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PutBudgetsPeriodsItems0 put budgets periods items0
//
// swagger:model PutBudgetsPeriodsItems0
type PutBudgetsPeriodsItems0 struct {

	// amount
	// Required: true
	Amount *float64 `json:"amount"`

	// end at
	// Format: date
	EndAt strfmt.Date `json:"end_at,omitempty"`

	// start at
	// Required: true
	// Format: date
	StartAt *strfmt.Date `json:"start_at"`
}

// Validate validates this put budgets periods items0
func (m *PutBudgetsPeriodsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PutBudgetsPeriodsItems0) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *PutBudgetsPeriodsItems0) validateEndAt(formats strfmt.Registry) error {
	if swag.IsZero(m.EndAt) { // not required
		return nil
	}

	if err := validate.FormatOf("end_at", "body", "date", m.EndAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PutBudgetsPeriodsItems0) validateStartAt(formats strfmt.Registry) error {

	if err := validate.Required("start_at", "body", m.StartAt); err != nil {
		return err
	}

	if err := validate.FormatOf("start_at", "body", "date", m.StartAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this put budgets periods items0 based on context it is used
func (m *PutBudgetsPeriodsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PutBudgetsPeriodsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PutBudgetsPeriodsItems0) UnmarshalBinary(b []byte) error {
	var res PutBudgetsPeriodsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
