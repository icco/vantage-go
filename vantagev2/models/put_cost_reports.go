// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PutCostReports Update a CostReport.
//
// swagger:model putCostReports
type PutCostReports struct {

	// The filter query language to apply to the CostReport. Additional documentation available at https://docs.vantage.sh/vql.
	Filter string `json:"filter,omitempty"`

	// The token of the Folder to add the CostReport to. Determines the Workspace the report is assigned to.
	FolderToken string `json:"folder_token,omitempty"`

	// Grouping values for aggregating costs on the report. Valid groupings: account_id, billing_account_id, charge_type, cost_category, cost_subcategory, provider, region, resource_id, service, tag:<tag_value>. If providing multiple groupings, join as comma separated values: groupings=provider,service,region
	Groupings []string `json:"groupings"`

	// The tokens of the SavedFilters to apply to the CostReport.
	SavedFilterTokens []string `json:"saved_filter_tokens"`

	// The title of the CostReport.
	Title string `json:"title,omitempty"`
}

// Validate validates this put cost reports
func (m *PutCostReports) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put cost reports based on context it is used
func (m *PutCostReports) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PutCostReports) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PutCostReports) UnmarshalBinary(b []byte) error {
	var res PutCostReports
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
