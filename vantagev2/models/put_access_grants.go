// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PutAccessGrants Update an AccessGrant.
//
// swagger:model putAccessGrants
type PutAccessGrants struct {

	// Allowed or denied access to resource.
	// Required: true
	// Enum: [denied allowed]
	Access *string `json:"access"`

	// The token for the Team you want to update the Access Grant for.
	// Required: true
	TeamToken *string `json:"team_token"`

	// The token of the Workspace the resource belongs to.
	// Required: true
	WorkspaceToken *string `json:"workspace_token"`
}

// Validate validates this put access grants
func (m *PutAccessGrants) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspaceToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var putAccessGrantsTypeAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["denied","allowed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		putAccessGrantsTypeAccessPropEnum = append(putAccessGrantsTypeAccessPropEnum, v)
	}
}

const (

	// PutAccessGrantsAccessDenied captures enum value "denied"
	PutAccessGrantsAccessDenied string = "denied"

	// PutAccessGrantsAccessAllowed captures enum value "allowed"
	PutAccessGrantsAccessAllowed string = "allowed"
)

// prop value enum
func (m *PutAccessGrants) validateAccessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, putAccessGrantsTypeAccessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PutAccessGrants) validateAccess(formats strfmt.Registry) error {

	if err := validate.Required("access", "body", m.Access); err != nil {
		return err
	}

	// value enum
	if err := m.validateAccessEnum("access", "body", *m.Access); err != nil {
		return err
	}

	return nil
}

func (m *PutAccessGrants) validateTeamToken(formats strfmt.Registry) error {

	if err := validate.Required("team_token", "body", m.TeamToken); err != nil {
		return err
	}

	return nil
}

func (m *PutAccessGrants) validateWorkspaceToken(formats strfmt.Registry) error {

	if err := validate.Required("workspace_token", "body", m.WorkspaceToken); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this put access grants based on context it is used
func (m *PutAccessGrants) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PutAccessGrants) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PutAccessGrants) UnmarshalBinary(b []byte) error {
	var res PutAccessGrants
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
