// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Segment Segment model
//
// swagger:model Segment
type Segment struct {

	// The date and time, in UTC, the segment was created. ISO 8601 Formatted.
	// Example: 2021-07-09T00:00:00Z
	CreatedAt string `json:"created_at,omitempty"`

	// The description of the Segment.
	// Example: Operating expenses
	Description string `json:"description,omitempty"`

	// The filter applied to the SegmentFilter. Additional documentation available at https://docs.vantage.sh/vql.
	Filter string `json:"filter,omitempty"`

	// The parent folder of this Segment.
	ParentFolder string `json:"parent_folder,omitempty"`

	// Costs are assigned in priority order across all segments with assigned filters.
	// Example: 100
	Priority int32 `json:"priority,omitempty"`

	// The title of the Segment.
	// Example: OPEX
	Title string `json:"title,omitempty"`

	// token
	Token string `json:"token,omitempty"`

	// Track Unallocated Costs which are not assigned to any of the created segments.
	// Example: false
	TrackUnallocated bool `json:"track_unallocated,omitempty"`

	// The token for the Workspace the Segment is a part of.
	WorkspaceToken string `json:"workspace_token,omitempty"`
}

// Validate validates this segment
func (m *Segment) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this segment based on context it is used
func (m *Segment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Segment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Segment) UnmarshalBinary(b []byte) error {
	var res Segment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
