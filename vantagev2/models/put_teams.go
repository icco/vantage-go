// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PutTeams Update a Team.
//
// swagger:model putTeams
type PutTeams struct {

	// The description of the Team.
	Description string `json:"description,omitempty"`

	// The name of the Team.
	Name string `json:"name,omitempty"`

	// The role to assign to the provided Users. Defaults to 'editor' which has editor permissions.
	// Enum: [owner editor viewer]
	Role string `json:"role,omitempty"`

	// The User tokens to associate to the Team.
	UserTokens []string `json:"user_tokens"`

	// The Workspace tokens to associate to the Team.
	WorkspaceTokens []string `json:"workspace_tokens"`
}

// Validate validates this put teams
func (m *PutTeams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var putTeamsTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["owner","editor","viewer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		putTeamsTypeRolePropEnum = append(putTeamsTypeRolePropEnum, v)
	}
}

const (

	// PutTeamsRoleOwner captures enum value "owner"
	PutTeamsRoleOwner string = "owner"

	// PutTeamsRoleEditor captures enum value "editor"
	PutTeamsRoleEditor string = "editor"

	// PutTeamsRoleViewer captures enum value "viewer"
	PutTeamsRoleViewer string = "viewer"
)

// prop value enum
func (m *PutTeams) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, putTeamsTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PutTeams) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this put teams based on context it is used
func (m *PutTeams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PutTeams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PutTeams) UnmarshalBinary(b []byte) error {
	var res PutTeams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
