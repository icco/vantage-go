// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostDashboards Create a Dashboard.
//
// swagger:model postDashboards
type PostDashboards struct {

	// Determines how to group costs in the Dashboard.
	// Enum: [cumulative day week month]
	DateBin string `json:"date_bin,omitempty"`

	// Determines the date range in the Dashboard. Incompatible with 'start_date' and 'end_date' parameters.
	// Enum: [this_month last_7_days last_30_days last_month last_3_months last_6_months custom last_12_months last_24_months last_36_months]
	DateInterval string `json:"date_interval,omitempty"`

	// The end date for the date range for costs in the Dashboard. ISO 8601 Formatted. Incompatible with 'date_interval' parameter.
	// Required: true
	EndDate *string `json:"end_date"`

	// The start date for the date range for costs in the Dashboard. ISO 8601 Formatted. Incompatible with 'date_interval' parameter.
	StartDate string `json:"start_date,omitempty"`

	// The title of the Dashboard.
	// Required: true
	Title *string `json:"title"`

	// The tokens of the widgets to add to the Dashboard. Currently only supports CostReport tokens.
	WidgetTokens []string `json:"widget_tokens"`

	// The token of the Workspace to add the Dashboard to. Required if the API token is associated with multiple Workspaces.
	WorkspaceToken string `json:"workspace_token,omitempty"`
}

// Validate validates this post dashboards
func (m *PostDashboards) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateBin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postDashboardsTypeDateBinPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cumulative","day","week","month"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postDashboardsTypeDateBinPropEnum = append(postDashboardsTypeDateBinPropEnum, v)
	}
}

const (

	// PostDashboardsDateBinCumulative captures enum value "cumulative"
	PostDashboardsDateBinCumulative string = "cumulative"

	// PostDashboardsDateBinDay captures enum value "day"
	PostDashboardsDateBinDay string = "day"

	// PostDashboardsDateBinWeek captures enum value "week"
	PostDashboardsDateBinWeek string = "week"

	// PostDashboardsDateBinMonth captures enum value "month"
	PostDashboardsDateBinMonth string = "month"
)

// prop value enum
func (m *PostDashboards) validateDateBinEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postDashboardsTypeDateBinPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PostDashboards) validateDateBin(formats strfmt.Registry) error {
	if swag.IsZero(m.DateBin) { // not required
		return nil
	}

	// value enum
	if err := m.validateDateBinEnum("date_bin", "body", m.DateBin); err != nil {
		return err
	}

	return nil
}

var postDashboardsTypeDateIntervalPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["this_month","last_7_days","last_30_days","last_month","last_3_months","last_6_months","custom","last_12_months","last_24_months","last_36_months"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postDashboardsTypeDateIntervalPropEnum = append(postDashboardsTypeDateIntervalPropEnum, v)
	}
}

const (

	// PostDashboardsDateIntervalThisMonth captures enum value "this_month"
	PostDashboardsDateIntervalThisMonth string = "this_month"

	// PostDashboardsDateIntervalLast7Days captures enum value "last_7_days"
	PostDashboardsDateIntervalLast7Days string = "last_7_days"

	// PostDashboardsDateIntervalLast30Days captures enum value "last_30_days"
	PostDashboardsDateIntervalLast30Days string = "last_30_days"

	// PostDashboardsDateIntervalLastMonth captures enum value "last_month"
	PostDashboardsDateIntervalLastMonth string = "last_month"

	// PostDashboardsDateIntervalLast3Months captures enum value "last_3_months"
	PostDashboardsDateIntervalLast3Months string = "last_3_months"

	// PostDashboardsDateIntervalLast6Months captures enum value "last_6_months"
	PostDashboardsDateIntervalLast6Months string = "last_6_months"

	// PostDashboardsDateIntervalCustom captures enum value "custom"
	PostDashboardsDateIntervalCustom string = "custom"

	// PostDashboardsDateIntervalLast12Months captures enum value "last_12_months"
	PostDashboardsDateIntervalLast12Months string = "last_12_months"

	// PostDashboardsDateIntervalLast24Months captures enum value "last_24_months"
	PostDashboardsDateIntervalLast24Months string = "last_24_months"

	// PostDashboardsDateIntervalLast36Months captures enum value "last_36_months"
	PostDashboardsDateIntervalLast36Months string = "last_36_months"
)

// prop value enum
func (m *PostDashboards) validateDateIntervalEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postDashboardsTypeDateIntervalPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PostDashboards) validateDateInterval(formats strfmt.Registry) error {
	if swag.IsZero(m.DateInterval) { // not required
		return nil
	}

	// value enum
	if err := m.validateDateIntervalEnum("date_interval", "body", m.DateInterval); err != nil {
		return err
	}

	return nil
}

func (m *PostDashboards) validateEndDate(formats strfmt.Registry) error {

	if err := validate.Required("end_date", "body", m.EndDate); err != nil {
		return err
	}

	return nil
}

func (m *PostDashboards) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post dashboards based on context it is used
func (m *PostDashboards) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PostDashboards) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostDashboards) UnmarshalBinary(b []byte) error {
	var res PostDashboards
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
