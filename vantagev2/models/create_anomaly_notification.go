// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateAnomalyNotification Create an Anomaly Notification for a Cost Report.
//
// swagger:model createAnomalyNotification
type CreateAnomalyNotification struct {

	// The token of the Cost Report folder that has the notification.
	// Required: true
	CostReportToken *string `json:"cost_report_token"`

	// The Slack/MS Teams channels that receive the notification.
	RecipientChannels []string `json:"recipient_channels"`

	// The threshold amount that must be met for the notification to fire.
	Threshold int32 `json:"threshold,omitempty"`

	// The tokens of the users that receive the notification.
	UserTokens []string `json:"user_tokens"`
}

// Validate validates this create anomaly notification
func (m *CreateAnomalyNotification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCostReportToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAnomalyNotification) validateCostReportToken(formats strfmt.Registry) error {

	if err := validate.Required("cost_report_token", "body", m.CostReportToken); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create anomaly notification based on context it is used
func (m *CreateAnomalyNotification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateAnomalyNotification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateAnomalyNotification) UnmarshalBinary(b []byte) error {
	var res CreateAnomalyNotification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
