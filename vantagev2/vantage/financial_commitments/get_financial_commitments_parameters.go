// Code generated by go-swagger; DO NOT EDIT.

package financial_commitments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetFinancialCommitmentsParams creates a new GetFinancialCommitmentsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetFinancialCommitmentsParams() *GetFinancialCommitmentsParams {
	return &GetFinancialCommitmentsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetFinancialCommitmentsParamsWithTimeout creates a new GetFinancialCommitmentsParams object
// with the ability to set a timeout on a request.
func NewGetFinancialCommitmentsParamsWithTimeout(timeout time.Duration) *GetFinancialCommitmentsParams {
	return &GetFinancialCommitmentsParams{
		timeout: timeout,
	}
}

// NewGetFinancialCommitmentsParamsWithContext creates a new GetFinancialCommitmentsParams object
// with the ability to set a context for a request.
func NewGetFinancialCommitmentsParamsWithContext(ctx context.Context) *GetFinancialCommitmentsParams {
	return &GetFinancialCommitmentsParams{
		Context: ctx,
	}
}

// NewGetFinancialCommitmentsParamsWithHTTPClient creates a new GetFinancialCommitmentsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetFinancialCommitmentsParamsWithHTTPClient(client *http.Client) *GetFinancialCommitmentsParams {
	return &GetFinancialCommitmentsParams{
		HTTPClient: client,
	}
}

/*
GetFinancialCommitmentsParams contains all the parameters to send to the API endpoint

	for the get financial commitments operation.

	Typically these are written to a http.Request.
*/
type GetFinancialCommitmentsParams struct {

	/* Limit.

	   The amount of results to return. The maximum is 1000.

	   Format: int32
	*/
	Limit *int32

	/* Page.

	   The page of results to return.

	   Format: int32
	*/
	Page *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get financial commitments params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFinancialCommitmentsParams) WithDefaults() *GetFinancialCommitmentsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get financial commitments params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFinancialCommitmentsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get financial commitments params
func (o *GetFinancialCommitmentsParams) WithTimeout(timeout time.Duration) *GetFinancialCommitmentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get financial commitments params
func (o *GetFinancialCommitmentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get financial commitments params
func (o *GetFinancialCommitmentsParams) WithContext(ctx context.Context) *GetFinancialCommitmentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get financial commitments params
func (o *GetFinancialCommitmentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get financial commitments params
func (o *GetFinancialCommitmentsParams) WithHTTPClient(client *http.Client) *GetFinancialCommitmentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get financial commitments params
func (o *GetFinancialCommitmentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the get financial commitments params
func (o *GetFinancialCommitmentsParams) WithLimit(limit *int32) *GetFinancialCommitmentsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get financial commitments params
func (o *GetFinancialCommitmentsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithPage adds the page to the get financial commitments params
func (o *GetFinancialCommitmentsParams) WithPage(page *int32) *GetFinancialCommitmentsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get financial commitments params
func (o *GetFinancialCommitmentsParams) SetPage(page *int32) {
	o.Page = page
}

// WriteToRequest writes these params to a swagger request
func (o *GetFinancialCommitmentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
