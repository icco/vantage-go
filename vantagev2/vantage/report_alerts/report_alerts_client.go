// Code generated by go-swagger; DO NOT EDIT.

package report_alerts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new report alerts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for report alerts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateReportAlert(params *CreateReportAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateReportAlertCreated, error)

	DeleteReportAlert(params *DeleteReportAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteReportAlertNoContent, error)

	GetReportAlert(params *GetReportAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReportAlertOK, error)

	GetReportAlerts(params *GetReportAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReportAlertsOK, error)

	UpdateReportAlert(params *UpdateReportAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateReportAlertOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateReportAlert Create a Report Alert for a Cost Report.
*/
func (a *Client) CreateReportAlert(params *CreateReportAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateReportAlertCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateReportAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createReportAlert",
		Method:             "POST",
		PathPattern:        "/report_alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateReportAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateReportAlertCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createReportAlert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteReportAlert Delete a Report Alert.
*/
func (a *Client) DeleteReportAlert(params *DeleteReportAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteReportAlertNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteReportAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteReportAlert",
		Method:             "DELETE",
		PathPattern:        "/report_alerts/{report_alert_token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteReportAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteReportAlertNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteReportAlert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetReportAlert Return a Report Alert that the current API token has access to.
*/
func (a *Client) GetReportAlert(params *GetReportAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReportAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getReportAlert",
		Method:             "GET",
		PathPattern:        "/report_alerts/{report_alert_token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReportAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReportAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReportAlert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetReportAlerts Return all Report Alerts.
*/
func (a *Client) GetReportAlerts(params *GetReportAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReportAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportAlertsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getReportAlerts",
		Method:             "GET",
		PathPattern:        "/report_alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReportAlertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReportAlertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReportAlerts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateReportAlert Update a Report Alert.
*/
func (a *Client) UpdateReportAlert(params *UpdateReportAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateReportAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateReportAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateReportAlert",
		Method:             "PUT",
		PathPattern:        "/report_alerts/{report_alert_token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateReportAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateReportAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateReportAlert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
