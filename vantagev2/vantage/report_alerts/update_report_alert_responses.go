// Code generated by go-swagger; DO NOT EDIT.

package report_alerts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vantage-sh/vantage-go/vantagev2/models"
)

// UpdateReportAlertReader is a Reader for the UpdateReportAlert structure.
type UpdateReportAlertReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateReportAlertReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateReportAlertOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateReportAlertBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /report_alerts/{report_alert_token}] updateReportAlert", response, response.Code())
	}
}

// NewUpdateReportAlertOK creates a UpdateReportAlertOK with default headers values
func NewUpdateReportAlertOK() *UpdateReportAlertOK {
	return &UpdateReportAlertOK{}
}

/*
UpdateReportAlertOK describes a response with status code 200, with default header values.

UpdateReportAlertOK update report alert o k
*/
type UpdateReportAlertOK struct {
	Payload *models.ReportAlert
}

// IsSuccess returns true when this update report alert o k response has a 2xx status code
func (o *UpdateReportAlertOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update report alert o k response has a 3xx status code
func (o *UpdateReportAlertOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update report alert o k response has a 4xx status code
func (o *UpdateReportAlertOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update report alert o k response has a 5xx status code
func (o *UpdateReportAlertOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update report alert o k response a status code equal to that given
func (o *UpdateReportAlertOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update report alert o k response
func (o *UpdateReportAlertOK) Code() int {
	return 200
}

func (o *UpdateReportAlertOK) Error() string {
	return fmt.Sprintf("[PUT /report_alerts/{report_alert_token}][%d] updateReportAlertOK  %+v", 200, o.Payload)
}

func (o *UpdateReportAlertOK) String() string {
	return fmt.Sprintf("[PUT /report_alerts/{report_alert_token}][%d] updateReportAlertOK  %+v", 200, o.Payload)
}

func (o *UpdateReportAlertOK) GetPayload() *models.ReportAlert {
	return o.Payload
}

func (o *UpdateReportAlertOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ReportAlert)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReportAlertBadRequest creates a UpdateReportAlertBadRequest with default headers values
func NewUpdateReportAlertBadRequest() *UpdateReportAlertBadRequest {
	return &UpdateReportAlertBadRequest{}
}

/*
UpdateReportAlertBadRequest describes a response with status code 400, with default header values.

BadRequest
*/
type UpdateReportAlertBadRequest struct {
	Payload *models.Errors
}

// IsSuccess returns true when this update report alert bad request response has a 2xx status code
func (o *UpdateReportAlertBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update report alert bad request response has a 3xx status code
func (o *UpdateReportAlertBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update report alert bad request response has a 4xx status code
func (o *UpdateReportAlertBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update report alert bad request response has a 5xx status code
func (o *UpdateReportAlertBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update report alert bad request response a status code equal to that given
func (o *UpdateReportAlertBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update report alert bad request response
func (o *UpdateReportAlertBadRequest) Code() int {
	return 400
}

func (o *UpdateReportAlertBadRequest) Error() string {
	return fmt.Sprintf("[PUT /report_alerts/{report_alert_token}][%d] updateReportAlertBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateReportAlertBadRequest) String() string {
	return fmt.Sprintf("[PUT /report_alerts/{report_alert_token}][%d] updateReportAlertBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateReportAlertBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateReportAlertBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
