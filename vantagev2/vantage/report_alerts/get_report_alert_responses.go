// Code generated by go-swagger; DO NOT EDIT.

package report_alerts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vantage-sh/vantage-go/vantagev2/models"
)

// GetReportAlertReader is a Reader for the GetReportAlert structure.
type GetReportAlertReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReportAlertReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetReportAlertOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetReportAlertNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /report_alerts/{report_alert_token}] getReportAlert", response, response.Code())
	}
}

// NewGetReportAlertOK creates a GetReportAlertOK with default headers values
func NewGetReportAlertOK() *GetReportAlertOK {
	return &GetReportAlertOK{}
}

/*
GetReportAlertOK describes a response with status code 200, with default header values.

GetReportAlertOK get report alert o k
*/
type GetReportAlertOK struct {
	Payload *models.ReportAlert
}

// IsSuccess returns true when this get report alert o k response has a 2xx status code
func (o *GetReportAlertOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get report alert o k response has a 3xx status code
func (o *GetReportAlertOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report alert o k response has a 4xx status code
func (o *GetReportAlertOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get report alert o k response has a 5xx status code
func (o *GetReportAlertOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get report alert o k response a status code equal to that given
func (o *GetReportAlertOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get report alert o k response
func (o *GetReportAlertOK) Code() int {
	return 200
}

func (o *GetReportAlertOK) Error() string {
	return fmt.Sprintf("[GET /report_alerts/{report_alert_token}][%d] getReportAlertOK  %+v", 200, o.Payload)
}

func (o *GetReportAlertOK) String() string {
	return fmt.Sprintf("[GET /report_alerts/{report_alert_token}][%d] getReportAlertOK  %+v", 200, o.Payload)
}

func (o *GetReportAlertOK) GetPayload() *models.ReportAlert {
	return o.Payload
}

func (o *GetReportAlertOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ReportAlert)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportAlertNotFound creates a GetReportAlertNotFound with default headers values
func NewGetReportAlertNotFound() *GetReportAlertNotFound {
	return &GetReportAlertNotFound{}
}

/*
GetReportAlertNotFound describes a response with status code 404, with default header values.

NotFound
*/
type GetReportAlertNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this get report alert not found response has a 2xx status code
func (o *GetReportAlertNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report alert not found response has a 3xx status code
func (o *GetReportAlertNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report alert not found response has a 4xx status code
func (o *GetReportAlertNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report alert not found response has a 5xx status code
func (o *GetReportAlertNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get report alert not found response a status code equal to that given
func (o *GetReportAlertNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get report alert not found response
func (o *GetReportAlertNotFound) Code() int {
	return 404
}

func (o *GetReportAlertNotFound) Error() string {
	return fmt.Sprintf("[GET /report_alerts/{report_alert_token}][%d] getReportAlertNotFound  %+v", 404, o.Payload)
}

func (o *GetReportAlertNotFound) String() string {
	return fmt.Sprintf("[GET /report_alerts/{report_alert_token}][%d] getReportAlertNotFound  %+v", 404, o.Payload)
}

func (o *GetReportAlertNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetReportAlertNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
