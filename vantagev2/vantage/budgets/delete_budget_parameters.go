// Code generated by go-swagger; DO NOT EDIT.

package budgets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteBudgetParams creates a new DeleteBudgetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteBudgetParams() *DeleteBudgetParams {
	return &DeleteBudgetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteBudgetParamsWithTimeout creates a new DeleteBudgetParams object
// with the ability to set a timeout on a request.
func NewDeleteBudgetParamsWithTimeout(timeout time.Duration) *DeleteBudgetParams {
	return &DeleteBudgetParams{
		timeout: timeout,
	}
}

// NewDeleteBudgetParamsWithContext creates a new DeleteBudgetParams object
// with the ability to set a context for a request.
func NewDeleteBudgetParamsWithContext(ctx context.Context) *DeleteBudgetParams {
	return &DeleteBudgetParams{
		Context: ctx,
	}
}

// NewDeleteBudgetParamsWithHTTPClient creates a new DeleteBudgetParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteBudgetParamsWithHTTPClient(client *http.Client) *DeleteBudgetParams {
	return &DeleteBudgetParams{
		HTTPClient: client,
	}
}

/*
DeleteBudgetParams contains all the parameters to send to the API endpoint

	for the delete budget operation.

	Typically these are written to a http.Request.
*/
type DeleteBudgetParams struct {

	// BudgetToken.
	BudgetToken string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete budget params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteBudgetParams) WithDefaults() *DeleteBudgetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete budget params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteBudgetParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete budget params
func (o *DeleteBudgetParams) WithTimeout(timeout time.Duration) *DeleteBudgetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete budget params
func (o *DeleteBudgetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete budget params
func (o *DeleteBudgetParams) WithContext(ctx context.Context) *DeleteBudgetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete budget params
func (o *DeleteBudgetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete budget params
func (o *DeleteBudgetParams) WithHTTPClient(client *http.Client) *DeleteBudgetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete budget params
func (o *DeleteBudgetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBudgetToken adds the budgetToken to the delete budget params
func (o *DeleteBudgetParams) WithBudgetToken(budgetToken string) *DeleteBudgetParams {
	o.SetBudgetToken(budgetToken)
	return o
}

// SetBudgetToken adds the budgetToken to the delete budget params
func (o *DeleteBudgetParams) SetBudgetToken(budgetToken string) {
	o.BudgetToken = budgetToken
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteBudgetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param budget_token
	if err := r.SetPathParam("budget_token", o.BudgetToken); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
