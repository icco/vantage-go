// Code generated by go-swagger; DO NOT EDIT.

package costs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vantage-sh/vantage-go/vantagev2/models"
)

// DeleteFolderReader is a Reader for the DeleteFolder structure.
type DeleteFolderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteFolderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteFolderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteFolderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /folders/{folder_token}] deleteFolder", response, response.Code())
	}
}

// NewDeleteFolderOK creates a DeleteFolderOK with default headers values
func NewDeleteFolderOK() *DeleteFolderOK {
	return &DeleteFolderOK{}
}

/*
DeleteFolderOK describes a response with status code 200, with default header values.

DeleteFolderOK delete folder o k
*/
type DeleteFolderOK struct {
	Payload *models.Folder
}

// IsSuccess returns true when this delete folder o k response has a 2xx status code
func (o *DeleteFolderOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete folder o k response has a 3xx status code
func (o *DeleteFolderOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete folder o k response has a 4xx status code
func (o *DeleteFolderOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete folder o k response has a 5xx status code
func (o *DeleteFolderOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete folder o k response a status code equal to that given
func (o *DeleteFolderOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete folder o k response
func (o *DeleteFolderOK) Code() int {
	return 200
}

func (o *DeleteFolderOK) Error() string {
	return fmt.Sprintf("[DELETE /folders/{folder_token}][%d] deleteFolderOK  %+v", 200, o.Payload)
}

func (o *DeleteFolderOK) String() string {
	return fmt.Sprintf("[DELETE /folders/{folder_token}][%d] deleteFolderOK  %+v", 200, o.Payload)
}

func (o *DeleteFolderOK) GetPayload() *models.Folder {
	return o.Payload
}

func (o *DeleteFolderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Folder)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFolderNotFound creates a DeleteFolderNotFound with default headers values
func NewDeleteFolderNotFound() *DeleteFolderNotFound {
	return &DeleteFolderNotFound{}
}

/*
DeleteFolderNotFound describes a response with status code 404, with default header values.

NotFound
*/
type DeleteFolderNotFound struct {
	Payload *models.Errors
}

// IsSuccess returns true when this delete folder not found response has a 2xx status code
func (o *DeleteFolderNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete folder not found response has a 3xx status code
func (o *DeleteFolderNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete folder not found response has a 4xx status code
func (o *DeleteFolderNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete folder not found response has a 5xx status code
func (o *DeleteFolderNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete folder not found response a status code equal to that given
func (o *DeleteFolderNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete folder not found response
func (o *DeleteFolderNotFound) Code() int {
	return 404
}

func (o *DeleteFolderNotFound) Error() string {
	return fmt.Sprintf("[DELETE /folders/{folder_token}][%d] deleteFolderNotFound  %+v", 404, o.Payload)
}

func (o *DeleteFolderNotFound) String() string {
	return fmt.Sprintf("[DELETE /folders/{folder_token}][%d] deleteFolderNotFound  %+v", 404, o.Payload)
}

func (o *DeleteFolderNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *DeleteFolderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
