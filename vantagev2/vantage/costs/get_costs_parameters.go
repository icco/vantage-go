// Code generated by go-swagger; DO NOT EDIT.

package costs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetCostsParams creates a new GetCostsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetCostsParams() *GetCostsParams {
	return &GetCostsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetCostsParamsWithTimeout creates a new GetCostsParams object
// with the ability to set a timeout on a request.
func NewGetCostsParamsWithTimeout(timeout time.Duration) *GetCostsParams {
	return &GetCostsParams{
		timeout: timeout,
	}
}

// NewGetCostsParamsWithContext creates a new GetCostsParams object
// with the ability to set a context for a request.
func NewGetCostsParamsWithContext(ctx context.Context) *GetCostsParams {
	return &GetCostsParams{
		Context: ctx,
	}
}

// NewGetCostsParamsWithHTTPClient creates a new GetCostsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetCostsParamsWithHTTPClient(client *http.Client) *GetCostsParams {
	return &GetCostsParams{
		HTTPClient: client,
	}
}

/*
GetCostsParams contains all the parameters to send to the API endpoint

	for the get costs operation.

	Typically these are written to a http.Request.
*/
type GetCostsParams struct {

	/* CostReportToken.

	   The CostReport token.
	*/
	CostReportToken string

	/* EndDate.

	   Last date you would like to filter costs to. ISO 8601 formatted.
	*/
	EndDate *string

	/* Groupings.

	   Group the results by specific field(s). Defaults to provider, service, account_id. Valid groupings: account_id, billing_account_id, charge_type, cost_category, cost_subcategory, provider, region, resource_id, service, tag:<tag_value>. If providing multiple groupings, join as comma separated values: groupings=provider,service,region
	*/
	Groupings []string

	/* Limit.

	   The amount of results to return. The maximum is 1000.

	   Format: int32
	*/
	Limit *int32

	/* Order.

	   Whether to order costs by date in an ascending or descending manner.

	   Default: "desc"
	*/
	Order *string

	/* StartDate.

	   First date you would like to filter costs from. ISO 8601 formatted.
	*/
	StartDate *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get costs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCostsParams) WithDefaults() *GetCostsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get costs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCostsParams) SetDefaults() {
	var (
		orderDefault = string("desc")
	)

	val := GetCostsParams{
		Order: &orderDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get costs params
func (o *GetCostsParams) WithTimeout(timeout time.Duration) *GetCostsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get costs params
func (o *GetCostsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get costs params
func (o *GetCostsParams) WithContext(ctx context.Context) *GetCostsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get costs params
func (o *GetCostsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get costs params
func (o *GetCostsParams) WithHTTPClient(client *http.Client) *GetCostsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get costs params
func (o *GetCostsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCostReportToken adds the costReportToken to the get costs params
func (o *GetCostsParams) WithCostReportToken(costReportToken string) *GetCostsParams {
	o.SetCostReportToken(costReportToken)
	return o
}

// SetCostReportToken adds the costReportToken to the get costs params
func (o *GetCostsParams) SetCostReportToken(costReportToken string) {
	o.CostReportToken = costReportToken
}

// WithEndDate adds the endDate to the get costs params
func (o *GetCostsParams) WithEndDate(endDate *string) *GetCostsParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the get costs params
func (o *GetCostsParams) SetEndDate(endDate *string) {
	o.EndDate = endDate
}

// WithGroupings adds the groupings to the get costs params
func (o *GetCostsParams) WithGroupings(groupings []string) *GetCostsParams {
	o.SetGroupings(groupings)
	return o
}

// SetGroupings adds the groupings to the get costs params
func (o *GetCostsParams) SetGroupings(groupings []string) {
	o.Groupings = groupings
}

// WithLimit adds the limit to the get costs params
func (o *GetCostsParams) WithLimit(limit *int32) *GetCostsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get costs params
func (o *GetCostsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOrder adds the order to the get costs params
func (o *GetCostsParams) WithOrder(order *string) *GetCostsParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the get costs params
func (o *GetCostsParams) SetOrder(order *string) {
	o.Order = order
}

// WithStartDate adds the startDate to the get costs params
func (o *GetCostsParams) WithStartDate(startDate *string) *GetCostsParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the get costs params
func (o *GetCostsParams) SetStartDate(startDate *string) {
	o.StartDate = startDate
}

// WriteToRequest writes these params to a swagger request
func (o *GetCostsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param cost_report_token
	qrCostReportToken := o.CostReportToken
	qCostReportToken := qrCostReportToken
	if qCostReportToken != "" {

		if err := r.SetQueryParam("cost_report_token", qCostReportToken); err != nil {
			return err
		}
	}

	if o.EndDate != nil {

		// query param end_date
		var qrEndDate string

		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate
		if qEndDate != "" {

			if err := r.SetQueryParam("end_date", qEndDate); err != nil {
				return err
			}
		}
	}

	if o.Groupings != nil {

		// binding items for groupings
		joinedGroupings := o.bindParamGroupings(reg)

		// query array param groupings
		if err := r.SetQueryParam("groupings", joinedGroupings...); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Order != nil {

		// query param order
		var qrOrder string

		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {

			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}
	}

	if o.StartDate != nil {

		// query param start_date
		var qrStartDate string

		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate
		if qStartDate != "" {

			if err := r.SetQueryParam("start_date", qStartDate); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetCosts binds the parameter groupings
func (o *GetCostsParams) bindParamGroupings(formats strfmt.Registry) []string {
	groupingsIR := o.Groupings

	var groupingsIC []string
	for _, groupingsIIR := range groupingsIR { // explode []string

		groupingsIIV := groupingsIIR // string as string
		groupingsIC = append(groupingsIC, groupingsIIV)
	}

	// items.CollectionFormat: "csv"
	groupingsIS := swag.JoinByFormat(groupingsIC, "csv")

	return groupingsIS
}
