// Code generated by go-swagger; DO NOT EDIT.

package costs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new costs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for costs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCostReport(params *CreateCostReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCostReportCreated, error)

	CreateCostReportFolder(params *CreateCostReportFolderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCostReportFolderCreated, error)

	GetCostReport(params *GetCostReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCostReportOK, error)

	GetCostReportFolder(params *GetCostReportFolderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCostReportFolderOK, error)

	GetCostReportFolders(params *GetCostReportFoldersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCostReportFoldersOK, error)

	GetCostReports(params *GetCostReportsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCostReportsOK, error)

	GetSavedFilter(params *GetSavedFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSavedFilterOK, error)

	GetSavedFilters(params *GetSavedFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSavedFiltersOK, error)

	UpdateCostReportFolder(params *UpdateCostReportFolderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCostReportFolderOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateCostReport Create a Cost Report.
*/
func (a *Client) CreateCostReport(params *CreateCostReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCostReportCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCostReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCostReport",
		Method:             "POST",
		PathPattern:        "/cost_reports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCostReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCostReportCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCostReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateCostReportFolder Create a Folder for Cost Reports.
*/
func (a *Client) CreateCostReportFolder(params *CreateCostReportFolderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCostReportFolderCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCostReportFolderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCostReportFolder",
		Method:             "POST",
		PathPattern:        "/reports/folders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCostReportFolderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCostReportFolderCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCostReportFolder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCostReport Return a Cost Report.
*/
func (a *Client) GetCostReport(params *GetCostReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCostReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCostReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCostReport",
		Method:             "GET",
		PathPattern:        "/cost_reports/{report_token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCostReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCostReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCostReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCostReportFolder Return a specific Folder for Cost Reports.
*/
func (a *Client) GetCostReportFolder(params *GetCostReportFolderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCostReportFolderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCostReportFolderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCostReportFolder",
		Method:             "GET",
		PathPattern:        "/reports/folders/{folder_token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCostReportFolderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCostReportFolderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCostReportFolder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCostReportFolders Return all Folders for Cost Reports.
*/
func (a *Client) GetCostReportFolders(params *GetCostReportFoldersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCostReportFoldersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCostReportFoldersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCostReportFolders",
		Method:             "GET",
		PathPattern:        "/reports/folders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCostReportFoldersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCostReportFoldersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCostReportFolders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCostReports Return all Cost Reports.
*/
func (a *Client) GetCostReports(params *GetCostReportsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCostReportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCostReportsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCostReports",
		Method:             "GET",
		PathPattern:        "/cost_reports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCostReportsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCostReportsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCostReports: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSavedFilter Return a specific Saved Filter.
*/
func (a *Client) GetSavedFilter(params *GetSavedFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSavedFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSavedFilterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSavedFilter",
		Method:             "GET",
		PathPattern:        "/reports/saved_filters/{saved_filter_token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSavedFilterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSavedFilterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSavedFilter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSavedFilters Return all Saved Filters that can be applied to a Cost Report.
*/
func (a *Client) GetSavedFilters(params *GetSavedFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSavedFiltersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSavedFiltersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSavedFilters",
		Method:             "GET",
		PathPattern:        "/reports/saved_filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSavedFiltersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSavedFiltersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSavedFilters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCostReportFolder Update a Folder for Cost Reports.
*/
func (a *Client) UpdateCostReportFolder(params *UpdateCostReportFolderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCostReportFolderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCostReportFolderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateCostReportFolder",
		Method:             "PUT",
		PathPattern:        "/reports/folders/{folder_token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCostReportFolderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCostReportFolderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCostReportFolder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
