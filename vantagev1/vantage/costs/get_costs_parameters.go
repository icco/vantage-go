// Code generated by go-swagger; DO NOT EDIT.

package costs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetCostsParams creates a new GetCostsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetCostsParams() *GetCostsParams {
	return &GetCostsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetCostsParamsWithTimeout creates a new GetCostsParams object
// with the ability to set a timeout on a request.
func NewGetCostsParamsWithTimeout(timeout time.Duration) *GetCostsParams {
	return &GetCostsParams{
		timeout: timeout,
	}
}

// NewGetCostsParamsWithContext creates a new GetCostsParams object
// with the ability to set a context for a request.
func NewGetCostsParamsWithContext(ctx context.Context) *GetCostsParams {
	return &GetCostsParams{
		Context: ctx,
	}
}

// NewGetCostsParamsWithHTTPClient creates a new GetCostsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetCostsParamsWithHTTPClient(client *http.Client) *GetCostsParams {
	return &GetCostsParams{
		HTTPClient: client,
	}
}

/*
GetCostsParams contains all the parameters to send to the API endpoint

	for the get costs operation.

	Typically these are written to a http.Request.
*/
type GetCostsParams struct {

	/* EndDate.

	   Query costs by the last date you would like to filter to. ISO 8601 Formatted - 2021-07-15 or 2021-07-15T19:20:48+00:00.
	*/
	EndDate *string

	/* Grouping.

	   Group the results by specific field(s). Valid groupings: account_id, billing_account_id, charge_type, cost_category, cost_sub_category, provider, service, tag:<tag_value>, region, folder_id, resource_id. If providing multiple groupings, be sure to use the following syntax: grouping[]=provider&grouping[]=service&grouping[]=account_id
	*/
	Grouping *string

	/* Limit.

	   The amount of results to return. The maximum is 1000

	   Format: int32
	   Default: 1000
	*/
	Limit *int32

	/* Page.

	   The page of results to return.

	   Format: int32
	   Default: 1
	*/
	Page *int32

	// ReportID.
	ReportID string

	/* StartDate.

	   Query costs by the first date you would like to filter from. ISO 8601 Formatted - 2021-07-15 or 2021-07-15T19:20:48+00:00.
	*/
	StartDate *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get costs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCostsParams) WithDefaults() *GetCostsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get costs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCostsParams) SetDefaults() {
	var (
		limitDefault = int32(1000)

		pageDefault = int32(1)
	)

	val := GetCostsParams{
		Limit: &limitDefault,
		Page:  &pageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get costs params
func (o *GetCostsParams) WithTimeout(timeout time.Duration) *GetCostsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get costs params
func (o *GetCostsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get costs params
func (o *GetCostsParams) WithContext(ctx context.Context) *GetCostsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get costs params
func (o *GetCostsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get costs params
func (o *GetCostsParams) WithHTTPClient(client *http.Client) *GetCostsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get costs params
func (o *GetCostsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndDate adds the endDate to the get costs params
func (o *GetCostsParams) WithEndDate(endDate *string) *GetCostsParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the get costs params
func (o *GetCostsParams) SetEndDate(endDate *string) {
	o.EndDate = endDate
}

// WithGrouping adds the grouping to the get costs params
func (o *GetCostsParams) WithGrouping(grouping *string) *GetCostsParams {
	o.SetGrouping(grouping)
	return o
}

// SetGrouping adds the grouping to the get costs params
func (o *GetCostsParams) SetGrouping(grouping *string) {
	o.Grouping = grouping
}

// WithLimit adds the limit to the get costs params
func (o *GetCostsParams) WithLimit(limit *int32) *GetCostsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get costs params
func (o *GetCostsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithPage adds the page to the get costs params
func (o *GetCostsParams) WithPage(page *int32) *GetCostsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get costs params
func (o *GetCostsParams) SetPage(page *int32) {
	o.Page = page
}

// WithReportID adds the reportID to the get costs params
func (o *GetCostsParams) WithReportID(reportID string) *GetCostsParams {
	o.SetReportID(reportID)
	return o
}

// SetReportID adds the reportId to the get costs params
func (o *GetCostsParams) SetReportID(reportID string) {
	o.ReportID = reportID
}

// WithStartDate adds the startDate to the get costs params
func (o *GetCostsParams) WithStartDate(startDate *string) *GetCostsParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the get costs params
func (o *GetCostsParams) SetStartDate(startDate *string) {
	o.StartDate = startDate
}

// WriteToRequest writes these params to a swagger request
func (o *GetCostsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndDate != nil {

		// query param end_date
		var qrEndDate string

		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate
		if qEndDate != "" {

			if err := r.SetQueryParam("end_date", qEndDate); err != nil {
				return err
			}
		}
	}

	if o.Grouping != nil {

		// query param grouping
		var qrGrouping string

		if o.Grouping != nil {
			qrGrouping = *o.Grouping
		}
		qGrouping := qrGrouping
		if qGrouping != "" {

			if err := r.SetQueryParam("grouping", qGrouping); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	// path param report_id
	if err := r.SetPathParam("report_id", o.ReportID); err != nil {
		return err
	}

	if o.StartDate != nil {

		// query param start_date
		var qrStartDate string

		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate
		if qStartDate != "" {

			if err := r.SetQueryParam("start_date", qStartDate); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
